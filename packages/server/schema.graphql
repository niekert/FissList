type SpotifyUser {
  displayName: String
  email: String!
  id: String!
  href: String!
  images: [Image]
}

type Image {
  height: Int
  url: String!
  width: Int
}

type PagedPlaylists {
  items: [Playlist!]!
  offset: Int!
  href: String!
  total: Int!
  limit: Int!
  next: String!
}

# Regular type definitions for Bar, Foo, Baz types...

type Party {
  id: ID!
  name: String!
  ownerUserId: String!
  playlistId: String!
  partyMembers: [PartyMember]
  playlist: Playlist!
}

type PartyMember {
  id: ID!
  spotifyUserid: String!
}

type Artist {
  id: String!
  name: String!
}

type Track {
  id: String!
  uri: String!
  name: String!
  label: String!
  artists: [Artist!]!
}

type PlaylistTrack {
  id: String!
  addedAt: String!
  track: Track!
}

type TracksLink {
  href: String!
  total: Int!
  items: [PlaylistTrack!]!
}

type Playlist {
  id: String!
  href: String!
  name: String!
  thumbnail: String
  tracks: TracksLink!
}

type Mutation {
  authorize: String!
  createParty(name: String!, playlistId: String!): Party
}

type User {
  id: String!
  playlist: Playlist!
}

type Query {
  allUsers: [User]!
  me: SpotifyUser
  meList: User!
  party(partyId: String!): Party
  userPlaylists(offset: Int): PagedPlaylists
}

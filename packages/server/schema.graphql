type SpotifyUser {
  displayName: String
  email: String!
  id: String!
  href: String!
  images: [Image]
}

type Image {
  height: Int
  url: String!
  width: Int
}

type PagedPlaylists {
  items: [Playlist!]!
  offset: Int!
  href: String!
  total: Int!
  limit: Int!
  next: String!
}

# Regular type definitions for Bar, Foo, Baz types...

type Party {
  id: ID!
  name: String!
  ownerUserId: String!
  partyMembers: [PartyMember]
}

type PartyMember {
  id: ID!
  spotifyUserid: String!
}

type User {
  id: ID!
  email: String
  name: String!
}

type TracksLink {
  href: String!
  total: Int!
}

type Playlist {
  id: String!
  href: String!
  name: String!
  thumbnail: String
  image: String!
  tracks: TracksLink!
}

type Mutation {
  authorize: String!
  createParty(name: String!): Party
  createUser(name: String!): User
}

type Query {
  allUsers: [User]!
  getMe: SpotifyUser
  getPlaylists(offset: Int): PagedPlaylists
}

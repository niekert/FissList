// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  party: (where?: PartyWhereInput) => Promise<boolean>;
  queuedTrack: (where?: QueuedTrackWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userNode: (where?: UserNodeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  party: (where: PartyWhereUniqueInput) => PartyPromise;
  parties: (
    args?: {
      where?: PartyWhereInput;
      orderBy?: PartyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Party>;
  partiesConnection: (
    args?: {
      where?: PartyWhereInput;
      orderBy?: PartyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PartyConnectionPromise;
  queuedTrack: (where: QueuedTrackWhereUniqueInput) => QueuedTrackPromise;
  queuedTracks: (
    args?: {
      where?: QueuedTrackWhereInput;
      orderBy?: QueuedTrackOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<QueuedTrack>;
  queuedTracksConnection: (
    args?: {
      where?: QueuedTrackWhereInput;
      orderBy?: QueuedTrackOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => QueuedTrackConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userNode: (where: UserNodeWhereUniqueInput) => UserNodePromise;
  userNodes: (
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  userNodesConnection: (
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserNodeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createParty: (data: PartyCreateInput) => PartyPromise;
  updateParty: (
    args: { data: PartyUpdateInput; where: PartyWhereUniqueInput }
  ) => PartyPromise;
  updateManyParties: (
    args: { data: PartyUpdateManyMutationInput; where?: PartyWhereInput }
  ) => BatchPayloadPromise;
  upsertParty: (
    args: {
      where: PartyWhereUniqueInput;
      create: PartyCreateInput;
      update: PartyUpdateInput;
    }
  ) => PartyPromise;
  deleteParty: (where: PartyWhereUniqueInput) => PartyPromise;
  deleteManyParties: (where?: PartyWhereInput) => BatchPayloadPromise;
  createQueuedTrack: (data: QueuedTrackCreateInput) => QueuedTrackPromise;
  updateQueuedTrack: (
    args: { data: QueuedTrackUpdateInput; where: QueuedTrackWhereUniqueInput }
  ) => QueuedTrackPromise;
  updateManyQueuedTracks: (
    args: {
      data: QueuedTrackUpdateManyMutationInput;
      where?: QueuedTrackWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertQueuedTrack: (
    args: {
      where: QueuedTrackWhereUniqueInput;
      create: QueuedTrackCreateInput;
      update: QueuedTrackUpdateInput;
    }
  ) => QueuedTrackPromise;
  deleteQueuedTrack: (where: QueuedTrackWhereUniqueInput) => QueuedTrackPromise;
  deleteManyQueuedTracks: (
    where?: QueuedTrackWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserNode: (data: UserNodeCreateInput) => UserNodePromise;
  updateUserNode: (
    args: { data: UserNodeUpdateInput; where: UserNodeWhereUniqueInput }
  ) => UserNodePromise;
  updateManyUserNodes: (
    args: { data: UserNodeUpdateManyMutationInput; where?: UserNodeWhereInput }
  ) => BatchPayloadPromise;
  upsertUserNode: (
    args: {
      where: UserNodeWhereUniqueInput;
      create: UserNodeCreateInput;
      update: UserNodeUpdateInput;
    }
  ) => UserNodePromise;
  deleteUserNode: (where: UserNodeWhereUniqueInput) => UserNodePromise;
  deleteManyUserNodes: (where?: UserNodeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  party: (
    where?: PartySubscriptionWhereInput
  ) => PartySubscriptionPayloadSubscription;
  queuedTrack: (
    where?: QueuedTrackSubscriptionWhereInput
  ) => QueuedTrackSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userNode: (
    where?: UserNodeSubscriptionWhereInput
  ) => UserNodeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type QueuedTrackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "trackId_ASC"
  | "trackId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserNodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PartyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "ownerUserId_ASC"
  | "ownerUserId_DESC"
  | "activeTrackId_ASC"
  | "activeTrackId_DESC"
  | "lastTimeUsersChanged_ASC"
  | "lastTimeUsersChanged_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PartyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface QueuedTrackWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  trackId?: String;
  trackId_not?: String;
  trackId_in?: String[] | String;
  trackId_not_in?: String[] | String;
  trackId_lt?: String;
  trackId_lte?: String;
  trackId_gt?: String;
  trackId_gte?: String;
  trackId_contains?: String;
  trackId_not_contains?: String;
  trackId_starts_with?: String;
  trackId_not_starts_with?: String;
  trackId_ends_with?: String;
  trackId_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: QueuedTrackWhereInput[] | QueuedTrackWhereInput;
  OR?: QueuedTrackWhereInput[] | QueuedTrackWhereInput;
  NOT?: QueuedTrackWhereInput[] | QueuedTrackWhereInput;
}

export interface UserNodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userId?: String;
  userId_not?: String;
  userId_in?: String[] | String;
  userId_not_in?: String[] | String;
  userId_lt?: String;
  userId_lte?: String;
  userId_gt?: String;
  userId_gte?: String;
  userId_contains?: String;
  userId_not_contains?: String;
  userId_starts_with?: String;
  userId_not_starts_with?: String;
  userId_ends_with?: String;
  userId_not_ends_with?: String;
  AND?: UserNodeWhereInput[] | UserNodeWhereInput;
  OR?: UserNodeWhereInput[] | UserNodeWhereInput;
  NOT?: UserNodeWhereInput[] | UserNodeWhereInput;
}

export interface PartyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  ownerUserId?: String;
  ownerUserId_not?: String;
  ownerUserId_in?: String[] | String;
  ownerUserId_not_in?: String[] | String;
  ownerUserId_lt?: String;
  ownerUserId_lte?: String;
  ownerUserId_gt?: String;
  ownerUserId_gte?: String;
  ownerUserId_contains?: String;
  ownerUserId_not_contains?: String;
  ownerUserId_starts_with?: String;
  ownerUserId_not_starts_with?: String;
  ownerUserId_ends_with?: String;
  ownerUserId_not_ends_with?: String;
  activeTrackId?: String;
  activeTrackId_not?: String;
  activeTrackId_in?: String[] | String;
  activeTrackId_not_in?: String[] | String;
  activeTrackId_lt?: String;
  activeTrackId_lte?: String;
  activeTrackId_gt?: String;
  activeTrackId_gte?: String;
  activeTrackId_contains?: String;
  activeTrackId_not_contains?: String;
  activeTrackId_starts_with?: String;
  activeTrackId_not_starts_with?: String;
  activeTrackId_ends_with?: String;
  activeTrackId_not_ends_with?: String;
  queuedTracks_every?: QueuedTrackWhereInput;
  queuedTracks_some?: QueuedTrackWhereInput;
  queuedTracks_none?: QueuedTrackWhereInput;
  requestedUserIds_every?: UserNodeWhereInput;
  requestedUserIds_some?: UserNodeWhereInput;
  requestedUserIds_none?: UserNodeWhereInput;
  bannedUserIds_every?: UserNodeWhereInput;
  bannedUserIds_some?: UserNodeWhereInput;
  bannedUserIds_none?: UserNodeWhereInput;
  partyUserIds_every?: UserNodeWhereInput;
  partyUserIds_some?: UserNodeWhereInput;
  partyUserIds_none?: UserNodeWhereInput;
  lastTimeUsersChanged?: String;
  lastTimeUsersChanged_not?: String;
  lastTimeUsersChanged_in?: String[] | String;
  lastTimeUsersChanged_not_in?: String[] | String;
  lastTimeUsersChanged_lt?: String;
  lastTimeUsersChanged_lte?: String;
  lastTimeUsersChanged_gt?: String;
  lastTimeUsersChanged_gte?: String;
  lastTimeUsersChanged_contains?: String;
  lastTimeUsersChanged_not_contains?: String;
  lastTimeUsersChanged_starts_with?: String;
  lastTimeUsersChanged_not_starts_with?: String;
  lastTimeUsersChanged_ends_with?: String;
  lastTimeUsersChanged_not_ends_with?: String;
  AND?: PartyWhereInput[] | PartyWhereInput;
  OR?: PartyWhereInput[] | PartyWhereInput;
  NOT?: PartyWhereInput[] | PartyWhereInput;
}

export type QueuedTrackWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserNodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PartyCreateInput {
  name: String;
  ownerUserId: String;
  activeTrackId: String;
  queuedTracks?: QueuedTrackCreateManyInput;
  previouslyPlayedTrackIds?: PartyCreatepreviouslyPlayedTrackIdsInput;
  requestedUserIds?: UserNodeCreateManyInput;
  bannedUserIds?: UserNodeCreateManyInput;
  partyUserIds?: UserNodeCreateManyInput;
  lastTimeUsersChanged?: String;
}

export interface QueuedTrackCreateManyInput {
  create?: QueuedTrackCreateInput[] | QueuedTrackCreateInput;
  connect?: QueuedTrackWhereUniqueInput[] | QueuedTrackWhereUniqueInput;
}

export interface QueuedTrackCreateInput {
  trackId: String;
  userVotes?: QueuedTrackCreateuserVotesInput;
}

export interface QueuedTrackCreateuserVotesInput {
  set?: String[] | String;
}

export interface PartyCreatepreviouslyPlayedTrackIdsInput {
  set?: String[] | String;
}

export interface UserNodeCreateManyInput {
  create?: UserNodeCreateInput[] | UserNodeCreateInput;
  connect?: UserNodeWhereUniqueInput[] | UserNodeWhereUniqueInput;
}

export interface UserNodeCreateInput {
  userId: String;
}

export interface PartyUpdateInput {
  name?: String;
  ownerUserId?: String;
  activeTrackId?: String;
  queuedTracks?: QueuedTrackUpdateManyInput;
  previouslyPlayedTrackIds?: PartyUpdatepreviouslyPlayedTrackIdsInput;
  requestedUserIds?: UserNodeUpdateManyInput;
  bannedUserIds?: UserNodeUpdateManyInput;
  partyUserIds?: UserNodeUpdateManyInput;
  lastTimeUsersChanged?: String;
}

export interface QueuedTrackUpdateManyInput {
  create?: QueuedTrackCreateInput[] | QueuedTrackCreateInput;
  update?:
    | QueuedTrackUpdateWithWhereUniqueNestedInput[]
    | QueuedTrackUpdateWithWhereUniqueNestedInput;
  upsert?:
    | QueuedTrackUpsertWithWhereUniqueNestedInput[]
    | QueuedTrackUpsertWithWhereUniqueNestedInput;
  delete?: QueuedTrackWhereUniqueInput[] | QueuedTrackWhereUniqueInput;
  connect?: QueuedTrackWhereUniqueInput[] | QueuedTrackWhereUniqueInput;
  disconnect?: QueuedTrackWhereUniqueInput[] | QueuedTrackWhereUniqueInput;
  deleteMany?: QueuedTrackScalarWhereInput[] | QueuedTrackScalarWhereInput;
  updateMany?:
    | QueuedTrackUpdateManyWithWhereNestedInput[]
    | QueuedTrackUpdateManyWithWhereNestedInput;
}

export interface QueuedTrackUpdateWithWhereUniqueNestedInput {
  where: QueuedTrackWhereUniqueInput;
  data: QueuedTrackUpdateDataInput;
}

export interface QueuedTrackUpdateDataInput {
  trackId?: String;
  userVotes?: QueuedTrackUpdateuserVotesInput;
}

export interface QueuedTrackUpdateuserVotesInput {
  set?: String[] | String;
}

export interface QueuedTrackUpsertWithWhereUniqueNestedInput {
  where: QueuedTrackWhereUniqueInput;
  update: QueuedTrackUpdateDataInput;
  create: QueuedTrackCreateInput;
}

export interface QueuedTrackScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  trackId?: String;
  trackId_not?: String;
  trackId_in?: String[] | String;
  trackId_not_in?: String[] | String;
  trackId_lt?: String;
  trackId_lte?: String;
  trackId_gt?: String;
  trackId_gte?: String;
  trackId_contains?: String;
  trackId_not_contains?: String;
  trackId_starts_with?: String;
  trackId_not_starts_with?: String;
  trackId_ends_with?: String;
  trackId_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: QueuedTrackScalarWhereInput[] | QueuedTrackScalarWhereInput;
  OR?: QueuedTrackScalarWhereInput[] | QueuedTrackScalarWhereInput;
  NOT?: QueuedTrackScalarWhereInput[] | QueuedTrackScalarWhereInput;
}

export interface QueuedTrackUpdateManyWithWhereNestedInput {
  where: QueuedTrackScalarWhereInput;
  data: QueuedTrackUpdateManyDataInput;
}

export interface QueuedTrackUpdateManyDataInput {
  trackId?: String;
  userVotes?: QueuedTrackUpdateuserVotesInput;
}

export interface PartyUpdatepreviouslyPlayedTrackIdsInput {
  set?: String[] | String;
}

export interface UserNodeUpdateManyInput {
  create?: UserNodeCreateInput[] | UserNodeCreateInput;
  update?:
    | UserNodeUpdateWithWhereUniqueNestedInput[]
    | UserNodeUpdateWithWhereUniqueNestedInput;
  upsert?:
    | UserNodeUpsertWithWhereUniqueNestedInput[]
    | UserNodeUpsertWithWhereUniqueNestedInput;
  delete?: UserNodeWhereUniqueInput[] | UserNodeWhereUniqueInput;
  connect?: UserNodeWhereUniqueInput[] | UserNodeWhereUniqueInput;
  disconnect?: UserNodeWhereUniqueInput[] | UserNodeWhereUniqueInput;
  deleteMany?: UserNodeScalarWhereInput[] | UserNodeScalarWhereInput;
  updateMany?:
    | UserNodeUpdateManyWithWhereNestedInput[]
    | UserNodeUpdateManyWithWhereNestedInput;
}

export interface UserNodeUpdateWithWhereUniqueNestedInput {
  where: UserNodeWhereUniqueInput;
  data: UserNodeUpdateDataInput;
}

export interface UserNodeUpdateDataInput {
  userId?: String;
}

export interface UserNodeUpsertWithWhereUniqueNestedInput {
  where: UserNodeWhereUniqueInput;
  update: UserNodeUpdateDataInput;
  create: UserNodeCreateInput;
}

export interface UserNodeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userId?: String;
  userId_not?: String;
  userId_in?: String[] | String;
  userId_not_in?: String[] | String;
  userId_lt?: String;
  userId_lte?: String;
  userId_gt?: String;
  userId_gte?: String;
  userId_contains?: String;
  userId_not_contains?: String;
  userId_starts_with?: String;
  userId_not_starts_with?: String;
  userId_ends_with?: String;
  userId_not_ends_with?: String;
  AND?: UserNodeScalarWhereInput[] | UserNodeScalarWhereInput;
  OR?: UserNodeScalarWhereInput[] | UserNodeScalarWhereInput;
  NOT?: UserNodeScalarWhereInput[] | UserNodeScalarWhereInput;
}

export interface UserNodeUpdateManyWithWhereNestedInput {
  where: UserNodeScalarWhereInput;
  data: UserNodeUpdateManyDataInput;
}

export interface UserNodeUpdateManyDataInput {
  userId?: String;
}

export interface PartyUpdateManyMutationInput {
  name?: String;
  ownerUserId?: String;
  activeTrackId?: String;
  previouslyPlayedTrackIds?: PartyUpdatepreviouslyPlayedTrackIdsInput;
  lastTimeUsersChanged?: String;
}

export interface QueuedTrackUpdateInput {
  trackId?: String;
  userVotes?: QueuedTrackUpdateuserVotesInput;
}

export interface QueuedTrackUpdateManyMutationInput {
  trackId?: String;
  userVotes?: QueuedTrackUpdateuserVotesInput;
}

export interface UserCreateInput {
  name: String;
}

export interface UserUpdateInput {
  name?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export interface UserNodeUpdateInput {
  userId?: String;
}

export interface UserNodeUpdateManyMutationInput {
  userId?: String;
}

export interface PartySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PartyWhereInput;
  AND?: PartySubscriptionWhereInput[] | PartySubscriptionWhereInput;
  OR?: PartySubscriptionWhereInput[] | PartySubscriptionWhereInput;
  NOT?: PartySubscriptionWhereInput[] | PartySubscriptionWhereInput;
}

export interface QueuedTrackSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: QueuedTrackWhereInput;
  AND?: QueuedTrackSubscriptionWhereInput[] | QueuedTrackSubscriptionWhereInput;
  OR?: QueuedTrackSubscriptionWhereInput[] | QueuedTrackSubscriptionWhereInput;
  NOT?: QueuedTrackSubscriptionWhereInput[] | QueuedTrackSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserNodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserNodeWhereInput;
  AND?: UserNodeSubscriptionWhereInput[] | UserNodeSubscriptionWhereInput;
  OR?: UserNodeSubscriptionWhereInput[] | UserNodeSubscriptionWhereInput;
  NOT?: UserNodeSubscriptionWhereInput[] | UserNodeSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Party {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  ownerUserId: String;
  activeTrackId: String;
  previouslyPlayedTrackIds: String[];
  lastTimeUsersChanged?: String;
}

export interface PartyPromise extends Promise<Party>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  ownerUserId: () => Promise<String>;
  activeTrackId: () => Promise<String>;
  queuedTracks: <T = FragmentableArray<QueuedTrack>>(
    args?: {
      where?: QueuedTrackWhereInput;
      orderBy?: QueuedTrackOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  previouslyPlayedTrackIds: () => Promise<String[]>;
  requestedUserIds: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bannedUserIds: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  partyUserIds: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lastTimeUsersChanged: () => Promise<String>;
}

export interface PartySubscription
  extends Promise<AsyncIterator<Party>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ownerUserId: () => Promise<AsyncIterator<String>>;
  activeTrackId: () => Promise<AsyncIterator<String>>;
  queuedTracks: <T = Promise<AsyncIterator<QueuedTrackSubscription>>>(
    args?: {
      where?: QueuedTrackWhereInput;
      orderBy?: QueuedTrackOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  previouslyPlayedTrackIds: () => Promise<AsyncIterator<String[]>>;
  requestedUserIds: <T = Promise<AsyncIterator<UserNodeSubscription>>>(
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bannedUserIds: <T = Promise<AsyncIterator<UserNodeSubscription>>>(
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  partyUserIds: <T = Promise<AsyncIterator<UserNodeSubscription>>>(
    args?: {
      where?: UserNodeWhereInput;
      orderBy?: UserNodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lastTimeUsersChanged: () => Promise<AsyncIterator<String>>;
}

export interface QueuedTrack {
  id: ID_Output;
  trackId: String;
  userVotes: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface QueuedTrackPromise extends Promise<QueuedTrack>, Fragmentable {
  id: () => Promise<ID_Output>;
  trackId: () => Promise<String>;
  userVotes: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface QueuedTrackSubscription
  extends Promise<AsyncIterator<QueuedTrack>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  trackId: () => Promise<AsyncIterator<String>>;
  userVotes: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNode {
  id: ID_Output;
  userId: String;
}

export interface UserNodePromise extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
}

export interface UserNodeSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface PartyConnection {}

export interface PartyConnectionPromise
  extends Promise<PartyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartyEdge>>() => T;
  aggregate: <T = AggregatePartyPromise>() => T;
}

export interface PartyConnectionSubscription
  extends Promise<AsyncIterator<PartyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PartyEdge {
  cursor: String;
}

export interface PartyEdgePromise extends Promise<PartyEdge>, Fragmentable {
  node: <T = PartyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartyEdgeSubscription
  extends Promise<AsyncIterator<PartyEdge>>,
    Fragmentable {
  node: <T = PartySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateParty {
  count: Int;
}

export interface AggregatePartyPromise
  extends Promise<AggregateParty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartySubscription
  extends Promise<AsyncIterator<AggregateParty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QueuedTrackConnection {}

export interface QueuedTrackConnectionPromise
  extends Promise<QueuedTrackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QueuedTrackEdge>>() => T;
  aggregate: <T = AggregateQueuedTrackPromise>() => T;
}

export interface QueuedTrackConnectionSubscription
  extends Promise<AsyncIterator<QueuedTrackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QueuedTrackEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQueuedTrackSubscription>() => T;
}

export interface QueuedTrackEdge {
  cursor: String;
}

export interface QueuedTrackEdgePromise
  extends Promise<QueuedTrackEdge>,
    Fragmentable {
  node: <T = QueuedTrackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QueuedTrackEdgeSubscription
  extends Promise<AsyncIterator<QueuedTrackEdge>>,
    Fragmentable {
  node: <T = QueuedTrackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQueuedTrack {
  count: Int;
}

export interface AggregateQueuedTrackPromise
  extends Promise<AggregateQueuedTrack>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQueuedTrackSubscription
  extends Promise<AsyncIterator<AggregateQueuedTrack>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserNodeConnection {}

export interface UserNodeConnectionPromise
  extends Promise<UserNodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserNodeEdge>>() => T;
  aggregate: <T = AggregateUserNodePromise>() => T;
}

export interface UserNodeConnectionSubscription
  extends Promise<AsyncIterator<UserNodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserNodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserNodeSubscription>() => T;
}

export interface UserNodeEdge {
  cursor: String;
}

export interface UserNodeEdgePromise
  extends Promise<UserNodeEdge>,
    Fragmentable {
  node: <T = UserNodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserNodeEdgeSubscription
  extends Promise<AsyncIterator<UserNodeEdge>>,
    Fragmentable {
  node: <T = UserNodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUserNodePromise
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserNodeSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PartySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PartySubscriptionPayloadPromise
  extends Promise<PartySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartyPreviousValuesPromise>() => T;
}

export interface PartySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartyPreviousValuesSubscription>() => T;
}

export interface PartyPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  ownerUserId: String;
  activeTrackId: String;
  previouslyPlayedTrackIds: String[];
  lastTimeUsersChanged?: String;
}

export interface PartyPreviousValuesPromise
  extends Promise<PartyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  ownerUserId: () => Promise<String>;
  activeTrackId: () => Promise<String>;
  previouslyPlayedTrackIds: () => Promise<String[]>;
  lastTimeUsersChanged: () => Promise<String>;
}

export interface PartyPreviousValuesSubscription
  extends Promise<AsyncIterator<PartyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ownerUserId: () => Promise<AsyncIterator<String>>;
  activeTrackId: () => Promise<AsyncIterator<String>>;
  previouslyPlayedTrackIds: () => Promise<AsyncIterator<String[]>>;
  lastTimeUsersChanged: () => Promise<AsyncIterator<String>>;
}

export interface QueuedTrackSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface QueuedTrackSubscriptionPayloadPromise
  extends Promise<QueuedTrackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QueuedTrackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QueuedTrackPreviousValuesPromise>() => T;
}

export interface QueuedTrackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QueuedTrackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QueuedTrackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QueuedTrackPreviousValuesSubscription>() => T;
}

export interface QueuedTrackPreviousValues {
  id: ID_Output;
  trackId: String;
  userVotes: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface QueuedTrackPreviousValuesPromise
  extends Promise<QueuedTrackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  trackId: () => Promise<String>;
  userVotes: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface QueuedTrackPreviousValuesSubscription
  extends Promise<AsyncIterator<QueuedTrackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  trackId: () => Promise<AsyncIterator<String>>;
  userVotes: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNodeSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserNodeSubscriptionPayloadPromise
  extends Promise<UserNodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserNodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserNodePreviousValuesPromise>() => T;
}

export interface UserNodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserNodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserNodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserNodePreviousValuesSubscription>() => T;
}

export interface UserNodePreviousValues {
  id: ID_Output;
  userId: String;
}

export interface UserNodePreviousValuesPromise
  extends Promise<UserNodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
}

export interface UserNodePreviousValuesSubscription
  extends Promise<AsyncIterator<UserNodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Party",
    embedded: false
  },
  {
    name: "QueuedTrack",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserNode",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://heroku-3a2922e17a.herokuapp.com/api/dev`,
  secret: `${process.env["MANAGEMENT_API_SECRET"]}`
});
export const prisma = new Prisma();

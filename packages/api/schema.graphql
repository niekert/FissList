#

type SpotifyUser {
  displayName: String
  email: String!
  id: String!
  href: String!
  images: [Image]
}

type Image {
  height: Int
  url: String!
  width: Int
}

type PagedPlaylists {
  items: [Playlist!]!
  offset: Int!
  href: String!
  total: Int!
  limit: Int!
  next: String!
}

type SavedTrack {
  addedAt: String!
  track: Track!
}

type PagedTracks {
  offset: Int!
  href: String!
  total: Int!
  limit: Int!
  next: String
  items: [Track!]!
}

type SearchResult {
  tracks: PagedTracks
}

type PagedSavedTracks {
  offset: Int!
  href: String!
  total: Int!
  limit: Int!
  next: String!
  items: [SavedTrack!]!
}

enum Permissions {
  NONE
  MEMBER
  ADMIN
  PENDING
}

enum Playback {
  PLAY
  PAUSE
  SKIP
}

# Regular type definitions for Bar, Foo, Baz types...

type QueuedTrack {
  id: ID!
  trackId: String!
  track: Track!
  userVotes: [String!]!
}

type Party {
  id: ID!
  name: String!
  permission: Permissions!
  ownerUserId: String!
  activeTrackId: String!
  activeTrack: Track!
  requestedUserIds: [String!]!
  partyUserIds: [String!]!
  queuedTracks: [QueuedTrack!]!
  updatedAt: String!
  userCount: Int!
}

type Artist {
  id: String!
  name: String!
}

type Track {
  id: String!
  uri: String!
  name: String!
  label: String!
  artists: [Artist!]!
  images: [Image!]
  isFavorited: Boolean
}

type PlaylistTrack {
  addedAt: String!
  track: Track!
}

type TracksLink {
  href: String!
  total: Int!
  items: [PlaylistTrack!]!
}

type Playlist {
  id: String!
  href: String!
  name: String!
  uri: String!
  thumbnail: String
  tracks: TracksLink!
}

type Me {
  user: SpotifyUser!
  parties: [Party]!
}

type Device {
  id: String
  isActive: Boolean!
  isPrivateSession: Boolean!
  isRestricted: Boolean!
  name: String!
  type: String!
  volumePercent: Int!
}

type PartyContext {
  activeTrackIndex: Int!
}

type Player {
  device: Device
  repeatState: String!
  progressMs: Int!
  shuffleState: Boolean!
  isPlaying: Boolean!
  item: Track
  currentlyPlayingType: String!
  devices: [Device!]
}

type TracksChangedPayload {
  partyId: String!
  nextActiveTrackId: String
  addedTrackIds: [String!]
  deletedTrackIds: [String!]
}

type PlayStateChange {
  isPlaying: Boolean
}

type Query {
  me: Me
  queuedTracks(partyId: String!, offset: Int, limit: Int): [QueuedTrack!]!
  party(partyId: String!): Party!
  player: Player
  parties(ids: [String]!): [Party]!
  playlist(id: String!): Playlist!
  savedTracks: PagedSavedTracks!
  userPlaylists(offset: Int): PagedPlaylists
  track(trackId: String!): Track!
  search(query: String!): SearchResult!
  favorited(trackId: String!): Boolean!
  previousTracks(partyId: String!, offset: Int, limit: Int): [Track!]!
}

type Mutation {
  authorize: String!
  createParty(name: String!, trackUris: [String!], playlistId: String): Party
  addTracks(partyId: String, trackIds: [String]!): Party
  deleteParty(partyId: String): Boolean
  updatePartyName(partyId: String!, name: String!): Party
  setActiveDevice(deviceId: String): Boolean
  requestPartyAccess(partyId: String!, userId: String): Party
  setPartyAccess(partyId: String!, userId: String!, grant: Boolean!): Party
  playback(partyId: String!, playback: Playback!): String!
  trackVote(queuedTrackId: String!): Boolean!
  favorite(trackId: String!, favorite: Boolean!): Boolean!
}

type Subscription {
  party(partyId: String!): Party
  partyTracksChanged(partyId: String!): TracksChangedPayload
}
